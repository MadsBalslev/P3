@using MudBlazor
@using Shared.Manager
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ISnackbar _snackbar
@inject ILogger<PosterCreateForm> Logger
@inject IWebHostEnvironment Environment
@inherits CreateForm<Poster>

<MudForm @ref="_form">
    <MudCard>
        <MudCardContent>
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.name" Label="Poster name" />
            <MudDatePicker Required="@true" MinDate="DateTime.Now" MaxDate="_precreateItem.endDate"
                ShowWeekNumbers="true" Label="Start date" @bind-Date="_precreateItem.startDate"
                DateFormat="dd/MM/yyyy" />
            <MudDatePicker Required="@true" MinDate="_precreateItem.startDate" ShowWeekNumbers="true" Label="End date"
                @bind-Date="_precreateItem.endDate" DateFormat="dd/MM/yyyy" />
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.image" Label="Image url" />
            <InputFile id="fileInput" type="file" OnChange="@posterFile" accept=".jpg, .jpeg, .png" />
            <MudCardActions>
                <MudButton Variant="Variant.Filled" HtmlTag="label" StartIcon="@Icons.Filled.CloudUpload"
                    for="fileInput" FullWidth="true">
                    Upload poster</MudButton>
            </MudCardActions>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnAddItem" FullWidth="true">Add
                    Poster</MudButton>
            </MudCardActions>
            <MudCardActions>
                <MudButton FullWidth="true" @onclick="OnCancel" Variant="Variant.Filled" Color="Color.Warning">Cancel
                </MudButton>
            </MudCardActions>
        </MudCardContent>
    </MudCard>
</MudForm>

@code
{
    private long _maxFileSize = 1024*100;
    private bool _isLoading;

    [CascadingParameter]
    protected User _user { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _precreateItem.createdBy = _user;
        _precreateItem.image = "";
        _precreateItem.posterId = -1;
    }
    private async Task posterFile(InputFileChangeEventArgs e)
    {
        var _loadedFile = e.File;
        {
            _isLoading = true;
            {
                if (_loadedFile.Size > _maxFileSize)
                {
                    _snackbar.Add($"Your file is too large, (Maximum 3MB)", Severity.Warning);
                    _loadedFile = null;
                }
                @* else if (_loadedFile)
                {

                } *@
                else
                {
                    try
                    {
                        var trustedFileNameForFileStorage = Path.GetRandomFileName();
                        var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads", @*TODO Give the correct name for EnvironmentName*@
                        trustedFileNameForFileStorage);

                        await using FileStream fs = new(path, FileMode.Create);
                        await _loadedFile.OpenReadStream(_maxFileSize).CopyToAsync(fs);
                        _snackbar.Add($"File was successfully uploaded", Severity.Success);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("File: {Filename} Error: {Error}",
                        _loadedFile.Name, ex.Message);
                    }
                }
            }
            _isLoading = false;
            Console.WriteLine(_loadedFile);
        }
    }
}