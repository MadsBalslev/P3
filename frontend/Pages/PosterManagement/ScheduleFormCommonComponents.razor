@using System
@using MudBlazor
@inherits ApiComponent

<MudTextField Required="@true" FullWidth="true" @bind-Value="Schedule.name" Label="Schedule Name" />

<MudDatePicker Required="@true" ShowWeekNumbers="true" Label="Start date"
    MinDate="Schedule.StartDateMinDate" MaxDate="Schedule.StartDateMaxDate"
    @bind-Date="Schedule.StartDateDate" DateFormat="dd/MM/yyyy" />

<MudTimePicker Required="true" Label="Start time" @bind-Time="Schedule.StartDateTime" />

<MudDatePicker Required="@true" ShowWeekNumbers="true" Label="End date"
    MinDate="Schedule.EndDateMinDate" @bind-Date="Schedule.EndDateDate" DateFormat="dd/MM/yyyy" />

<MudTimePicker Required="true" Label="End time" @bind-Time="Schedule.EndDateTime" />

<MudSelect @bind-value="Schedule.poster.id" Required="true" T="int?"
    Placeholder="Select what poster to schedule...">
    @foreach (Poster poster in _posters)
    {
        <MudSelectItem Value="@(poster.id)">@poster.name</MudSelectItem>
    }
</MudSelect>

<MudSelect @bind-value="Schedule.zone.id" Required="true" T="int?"
    Placeholder="Select what zone to schedule in...">
    @foreach (Zone zone in _zones)
    {
        <MudSelectItem Value="@(zone.id)">@zone.name</MudSelectItem>
    }
</MudSelect>

@if (Schedule.EndDateDate == Schedule.StartDateDate && Schedule.EndDateTime < Schedule.StartDateTime )
{
    <MudText>Notice that this schedule will not be displayed as the starting date is the same as or before the ending
        date</MudText>
}

@code
{
    [Parameter]
    public Schedule Schedule { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _posters = await RequestHandler<None, List<Poster>>(HttpMethod.Get, "/Posters");
        _zones = await RequestHandler<None, List<Zone>>(HttpMethod.Get, "/Zones");
    }

    private List<Poster> _posters = new List<Poster>();

    private List<Zone> _zones = new List<Zone>();
}