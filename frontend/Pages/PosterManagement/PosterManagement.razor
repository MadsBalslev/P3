@page "/PosterManagement"
@using MudBlazor
@inject ISnackbar Snackbar
@using frontend.Shared.Manager

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Posters">
        <Manager T="@Poster" ApiPath="/Posters" Context="poster" Filter="FilterFunc">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.id">ID</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.name">Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.createdBy.name">Creator
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.institution.name">Institution
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.image">Image url
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@poster.id</MudTd>
                <MudTd>@poster.name</MudTd>
                <MudTd>@poster.createdBy.name</MudTd>
                <MudTd>@poster.institution.name</MudTd>
                <MudTd>@poster.image</MudTd>
            </RowTemplate>
            <CreateForm>
                <PosterCreateForm />
            </CreateForm>
            <EditForm>
                <PosterEditForm />
            </EditForm>
        </Manager>
    </MudTabPanel>
    <MudTabPanel Text="Poster Schedules">
        <Manager T="@Schedule" ApiPath="/Schedule" Context="schedule" Filter="FilterFuncSchedule">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.id">Schedule ID</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.name">Schedule Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.startDate">Start date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.endDate">End date
                    </MudTableSortLabel>
                </MudTh>
                <!-- <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.dailyToString">Repeat daily
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.weekday">Weekday
                    </MudTableSortLabel>
                </MudTh> -->
            </HeaderContent>
            <RowTemplate>
                <MudTd>@schedule.id</MudTd>
                <MudTd>@schedule.name</MudTd>
                <MudTd>@schedule.startDate</MudTd>
                <MudTd>@schedule.endDate</MudTd>
                @* <MudTd>@schedule.dailyToString</MudTd>
                <MudTd>@schedule.weekday</MudTd> *@
            </RowTemplate>
            <CreateForm>
                <ScheduleCreateForm />
            </CreateForm>
            @* <EditForm>
                <PosterEditForm />
            </EditForm> *@
        </Manager>
    </MudTabPanel>
</MudTabs>

@code
{
    private bool FilterFunc(Poster poster, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (poster.id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.createdBy.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.institution.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.image.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFuncSchedule(Schedule schedule, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (schedule.id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
         // if (schedule.posterId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
         // return true;
        if (schedule.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        // if (schedule.startDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        // if (schedule.endDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true; *@
        if (schedule.dailyToString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.weekday.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
