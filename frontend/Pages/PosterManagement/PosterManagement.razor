@page "/PosterManagement"
@using MudBlazor
@using frontend.Shared.Manager
@inject ICurrentUserService CurrentUserService
@inherits ApiComponent

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
    <MudTabPanel Text="Posters">
        <Manager T="@Poster" ApiPath="/Posters" Context="poster" Filter="FilterFunc">
            <HeaderContent>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTh>
                        <MudTableSortLabel T=@Poster SortBy="(x) => x.id">ID</MudTableSortLabel>
                    </MudTh>
                }
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.name">Name
                    </MudTableSortLabel>
                </MudTh>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTh>
                        <MudTableSortLabel T=@Poster SortBy="(x) => x.institution.name">Institution
                        </MudTableSortLabel>
                    </MudTh>
                }
                <MudTh>
                    <MudTableSortLabel T=@Poster SortBy="(x) => x.image">Image url
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTd>@poster.id</MudTd>
                }
                <MudTd>@poster.name</MudTd>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTd>@poster.institution.name</MudTd>
                }
                <MudTd>@poster.image</MudTd>
            </RowTemplate>
            <CreateForm>
                <PosterCreateForm />
            </CreateForm>
            <EditForm>
                <PosterEditForm />
            </EditForm>
        </Manager>
    </MudTabPanel>
    <MudTabPanel Text="Poster Schedules">
        @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
        {
            <MudContainer Class="mt-3">
                <MudGrid>
                    <MudItem xs="4">
                        <MudSlider @bind-Value="Metadata.timerValue" Min="1000" Max="60000" Step="1000">
                            Timer: @(Metadata.timerValue/1000) seconds</MudSlider>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="@OnApply" Variant=" Variant.Outlined">Apply</MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        }
        <Manager T="@Schedule" ApiPath="/Schedule" Context="schedule" Filter="FilterFuncSchedule">
            <HeaderContent>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTh>
                        <MudTableSortLabel T=@Schedule SortBy="(x) => x.id">Schedule ID
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T=@Schedule SortBy=" (x) => x.poster.id">Poster ID
                        </MudTableSortLabel>
                    </MudTh>
                }
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy=" (x) => x.poster.id">Poster Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.name">Schedule Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.startDate">Start date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.endDate">End date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T=@Schedule SortBy="(x) => x.zone.name">Zone
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                @if (AccessLevel.SysAdmin <= CurrentUserService.User.AccessLevel)
                {
                    <MudTd>@schedule.id</MudTd>
                    <MudTd>@schedule.poster.id</MudTd>
                }
                <MudTd>@schedule.poster.name</MudTd>
                <MudTd>@schedule.name</MudTd>
                <MudTd>@schedule.startDate</MudTd>
                <MudTd>@schedule.endDate</MudTd>
                <MudTd>@schedule.zone.name</MudTd>
            </RowTemplate>
            <CreateForm>
                <ScheduleCreateForm />
            </CreateForm>
            <EditForm>
                <ScheduleEditForm />
            </EditForm>
        </Manager>
    </MudTabPanel>
</MudTabs>

@code
{
    private Metadata Metadata { get; set; }
    private bool FilterFunc(Poster poster, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (poster.id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.institution.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (poster.image.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFuncSchedule(Schedule schedule, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (schedule.id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.poster.id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.poster.name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.startDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.endDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (schedule.zone.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private async Task OnApply()
    {
        await RequestHandler<Metadata, Metadata>(HttpMethod.Put, "/Metadata/1", Metadata,
        requestSuccessPopup: "Timer was updated");
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Metadata = await RequestHandler<None, Metadata>(HttpMethod.Get, "/Metadata/1");
    }
}
