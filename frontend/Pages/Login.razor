@using MudBlazor
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@using frontend.Shared.Layout
@layout BlankMudBlazorPage
@inherits ApiComponent

@page "/login"

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="4" class="mt-8">
            <MudCard>
                <MudCardContent>
                    <MudForm @ref="_loginForm" @bind-IsValid="@_success" @bind-Errors="@_errors">
                        <MudText Typo="Typo.h4" Align="Align.Center">Login</MudText>
                        <MudTextField @bind-value="_loginInformation.email" InputType="InputType.Email" T="string"
                            FullWidth="true" Required="@true" RequiredError="Email is required"
                            Label="Email"
                            />
                        <MudTextField @bind-Value="_loginInformation.password" InputType="InputType.Password"
                            T="string" FullWidth="true" Required="@true"
                            RequiredError="Password is required" @ref="_pwFieldLogin"
                            Label="Password"></MudTextField>
                        <MudButton OnClick="OnLogin" FullWidth="true" Class="mt-3" Variant="Variant.Filled">Login</MudButton>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private bool _success;
    private string[] _errors = { };
    private MudTextField<string> _pwFieldLogin;
    private MudForm _loginForm;

    private LoginInformation _loginInformation = new();


    private async Task OnLogin()
    {
        // Get hashed password, set password in the user service.
        string authorization = await RequestHandler<LoginInformation, string>(HttpMethod.Post, "/Login", _loginInformation);
        if (authorization != null)
        {
            CurrentUserService.Authorization = authorization;
        }

        // Get User information, set information.
        User proxyUser = await RequestHandler<User, User>(HttpMethod.Get, "/Users/GetUser");
        if (proxyUser != null)
        {
            CurrentUserService.User = proxyUser;
            NavigationManager.NavigateTo("/");
        }
    }
}