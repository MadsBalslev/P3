@page "/PosterManagement"
@using MudBlazor
@inject ISnackbar Snackbar


<style>
    .selected {
        background-color: #1E88E5 !important;
    }

    .selected>td {
        color: white !important;
    }

    .selected>td .mud-input {
        color: white !important;
    }
</style>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Posters">
        <Manager T="@Poster">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Creator</MudTh>
                <MudTh>Institution</MudTh>
            </HeaderContent>
        </Manager>
        @* <MudContainer>
            <MudGrid Justify="Justify.Center">
            <MudItem>
            <MudTable Items="@_posters" Hover="true" RowClassFunc="@SelectedRowClassFunc" @ref="_posterMudTable"
            @onclick="UpdateManager">
            <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Creator</MudTh>
            <MudTh>Institution</MudTh>
            </HeaderContent>
            <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Creator</MudTd>
            <MudTd>@context.Institution</MudTd>
            </RowTemplate>
            </MudTable>
            </MudItem>
            <MudItem>
            <MudForm>
            <MudCard>
            <MudCardContent>
            @if (_currentMode == PosterMode.Create)
            {
            <MudForm @ref="_form" @bind-IsValid="@_success">

            <MudTextField T="string" Label="Poster name" Required="true"
            RequiredError="Poster name is required!" />

            <InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple
            accept=".jpg, .jpeg, .png" />

            <MudButton HtmlTag="label" Variant="Variant.Filled"
            StartIcon="@Icons.Filled.CloudUpload" for="fileInput112">
            Upload your image
            </MudButton>
            </MudForm>
            }
            else if (_currentMode == PosterMode.Edit)
            {
            <MudForm @ref="_form" @bind-IsValid="@_success"></MudForm>
            }
            </MudCardContent>
            <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)"
            Class="ml-auto">Upload poster</MudButton>
            </MudCardActions>
            </MudCard>
            </MudForm>
            </MudItem>
            </MudGrid>
            </MudContainer> *@
    </MudTabPanel>
    <MudTabPanel Text="Poster Schedules">
    </MudTabPanel>
</MudTabs>

@code
{
    string[] _displayRowTemplateProperties = new string[] { "Name", "Creator", "Institution" };
    @* private enum PosterMode
        {
        Edit,
        Create,
        }

        private MudForm _form;

        private bool _success;

        private PosterMode _currentMode { get; set; } = PosterMode.Create;

        private List<Poster> _posters { get; set; } = new List<Poster>();

        private int _selectedRowNumber = -1;

        private MudTable<Poster> _posterMudTable;

        protected override void OnParametersSet()
        {
        base.OnParametersSet();
        getPosterFromServer();
        }

        private void getPosterFromServer()
        {
        _posters.Add(new Poster("poster 1", "Casper", "AAU"));
        _posters.Add(new Poster("poster 2", "Mads", "AAU"));
        _posters.Add(new Poster("poster 3", "MÃ¸ller", "AAU"));
        }

        private string SelectedRowClassFunc(Poster poster, int rowNumber)
        {
        if (_selectedRowNumber == rowNumber)
        {
        _selectedRowNumber = -1;
        _currentMode = PosterMode.Create;
        return string.Empty;
        }
        else if (_posterMudTable.SelectedItem != null && _posterMudTable.SelectedItem.Equals(poster))
        {
        _selectedRowNumber = rowNumber;
        _currentMode = PosterMode.Edit;
        return "selected";
        }
        else
        {
        return string.Empty;
        }

        }

        private void UpdateManager() { StateHasChanged() is implicitly called }

        private void UploadFiles(InputFileChangeEventArgs e)
        {
        var entries = e.GetMultipleFiles();
        //Do your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($"Files with {entries.FirstOrDefault().Size} bytes size are not allowed", Severity.Error);
        Snackbar.Add($"Files starting with letter {entries.FirstOrDefault().Name.Substring(0, 1)} are not recommended",
        Severity.Warning);
        Snackbar.Add($"This file has the extension {entries.FirstOrDefault().Name.Split(".").Last()}", Severity.Info);
        //TODO upload the files to the server
        } *@
}