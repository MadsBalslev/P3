@using MudBlazor
@using System.Text.Json
@using System.IO
@using Microsoft.Extensions.Configuration
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inherits ApiComponent

@* <MudText Typo ="Typo.h6">Insert Institution Admin information</MudText>
<MudTextField Required="@true" @bind-Value="User.firstName" Label="First name" />
<MudTextField Required="@true" @bind-Value="User.lastName" Label="Last name" />
<MudTextField Required="@true" @bind-Value="User.phoneNumber" Label="Phone number" />
<MudTextField Required="@true" @bind-Value="User.email" Label="Email address" />
<MudTextField Required="PasswordFieldIsRequired" @bind-Value="User.password" Label="Password"
    InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
    OnAdornmentClick="ShowOrHidePassword" />
<MudTextField Required="PasswordFieldIsRequired"
    Validation="new Func<string, bool>(ValidatePassword)" @bind-Value="_confirmedPassword"
    Label="Confirm password" InputType="@PasswordInput" Adornment="Adornment.End"
    AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowOrHidePassword" /> *@

<MudText Typo ="Typo.h6">Insert Institution information</MudText>
<MudTextField Required="@true" FullWidth="true" @bind-Value="Institution.name"
    Label="Institution name" />

@code
{
    [Parameter]
    public Institution Institution { get; set; }
    public User User { get; set; } = new();

    private List<User> _users = new List<User>();


    protected override async Task OnInitializedAsync()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get,
        Configuration.GetValue<string>("ApiBaseAddress") + "/Users");

        HttpClient client = ClientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using Stream responseStream = await response.Content.ReadAsStreamAsync();
            _users = await JsonSerializer.DeserializeAsync<List<User>>(responseStream);
        }
    }
}
