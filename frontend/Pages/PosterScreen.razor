@page "/posterscreen"
@using System
@using System.Collections.Generic
@using frontend.Shared.Layout
@layout PosterScreenLayout
@inject IJSRuntime JS


<p> <button @onclick="ShowSlides">Show slides!</button> </p>

<div class="container">

    <!-- <div class="loading" hidden=@hidetext>
        <h1> Loading picture number: @currentPicture ...</h1>
    </div> -->

    <div class="imgContainer" <img class="poster" src="@currentPicture">
    </div>
</div>



@code
{
    public static string currentPicture;
    public string[] mySlides =
    new string[] {
"https://cdn.discordapp.com/attachments/884376312079327262/903620476809650196/IMG_1565.jpg",
"https://cdn.discordapp.com/attachments/884376312079327262/903620772562612274/image0.png",
"https://cdn.discordapp.com/attachments/884376312079327262/903342511601356820/image0.jpg",
    };

    private async Task ShowSlides()
    {
        Console.WriteLine("Bang");
        currentPicture = new(await JS.InvokeAsync<string>("showSlides", mySlides));
    }

    [JSInvokable]
    public static void changePictureValue(string value)
    {
        Console.WriteLine("PLEASE");
        currentPicture = value;
    }
}



@*
    System.Timers.Timer ImageTimer
    bool hidepicture = false;
    bool hidetext = false;

    string imageSource { get => Posters[currentPicture]; }

    List<string> Posters = new List<string>
    {
    "/images/nordkraft.jpg",
    "/images/pointer.png",
    "/images/pointerpointer.png",
    };


    string createPoster()
    {
    Poster picture1 = new Poster("Film plakat", "Patrick", "Nordkraft");
    picture1.ImageUrl = "https://cdn.discordapp.com/attachments/755020353201373244/902461379485790238/tlvvhv1sum641.png";
    return picture1.ImageUrl;
    }

    string showPoster()
    {
    return createPoster();
    }

    void nextPic(Object source, System.Timers.ElapsedEventArgs e)
    {
    if ((currentPicture < Posters.Count - 1)) { currentPicture += 1; }
    else currentPicture = 0;
    InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
    if (firstRender)
    {

    cachePictures();

    ImageTimer = new System.Timers.Timer(4000);
    ImageTimer.Elapsed += nextPic;
    ImageTimer.AutoReset = true;
    ImageTimer.Start();
    }
    }

    void cachePictures()
    {
    int cachenumber = 0;

    while (cachenumber < Posters.Count - 1)
    {
    System.Threading.Thread.Sleep(400);
    cachenumber++;
    currentPicture++;
    InvokeAsync(StateHasChanged);

    if (cachenumber == Posters.Count - 1)
    {
    hidepicture = false;
    hidetext = true;
    }
    }
    }
*@
