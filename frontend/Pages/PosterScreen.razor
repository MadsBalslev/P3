@page "/posterscreen"
@using System
@using System.Collections.Generic
@layout PosterScreenLayout

<div class="imgContainer">
    <img class="poster" src="@imageSource">
</div>



@code
{
    System.Timers.Timer ImageTimer;
    int currentPicture = 0;
    string imageSource { get => Posters[currentPicture]; }
    List<string> Posters = new List<string>
{
"https://cdn.discordapp.com/attachments/789112629838086166/902286892949721128/rif-1635192349160.jpg",
"https://cdn.discordapp.com/attachments/755020353201373244/902461379485790238/tlvvhv1sum641.png",
"https://cdn.discordapp.com/attachments/884376312079327262/902109327748390943/20211019_154813.png",
"https://cdn.discordapp.com/attachments/884376312079327262/901081493043027978/image0.png",
"https://cdn.discordapp.com/attachments/789112629838086166/902166599333707826/unknown.png",
"https://cdn.discordapp.com/attachments/789112629838086166/902166726958006332/unknown.png",
};


    @* string createPoster()
        {
        Poster picture1 = new Poster("Film plakat", "Patrick", "Nordkraft");
        picture1.ImageUrl = "https://cdn.discordapp.com/attachments/755020353201373244/902461379485790238/tlvvhv1sum641.png";
        return picture1.ImageUrl;
        }

        string showPoster()
        {
        return createPoster();
        } *@

    void nextPic(Object source, System.Timers.ElapsedEventArgs e)
    {
        if ((currentPicture < Posters.Count - 1)) { currentPicture += 1; }
        else currentPicture = 0;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            cachePictures();

            ImageTimer = new System.Timers.Timer(4000);
            ImageTimer.Elapsed += nextPic;
            ImageTimer.AutoReset = true;
            ImageTimer.Start();
        }
    }

    void cachePictures()
    {
        int cachenumber = 0;

        while (cachenumber < Posters.Count - 1)
        {
            System.Threading.Thread.Sleep(400);
            cachenumber++;
            currentPicture++;
            InvokeAsync(StateHasChanged);
        }
    }
}
