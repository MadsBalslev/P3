@inherits Shared.Manager.CreateForm<User>
@using MudBlazor
@using System.Text.Json
@using System.IO
@using Microsoft.Extensions.Configuration;
@inject IHttpClientFactory ClientFactory


<MudForm @ref="_form">
    <MudCard>
        <MudCardContent>
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.firstName"
                Label="First name" />
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.lastName"
                Label="Last name" />
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.phoneNumber"
                Label="Phone number" />
            <MudTextField Required="@true" FullWidth="true" @bind-Value="_precreateItem.email"
                Label="Email address" />
            <MudSelect Required="@true" T="string" @bind-Value="_precreateItem.RoleString"
                Placeholder="Select user role">
                <MudSelectItem Value="@("Normal user")" />
                <MudSelectItem Value="@("Institution admin")" />
                <MudSelectItem Value="@("System admin")" />
            </MudSelect>
            <MudSelect Required="@true" T="int" @bind-Value="_precreateItem.InstitutionId"
                Placeholder="Select user role">
                @foreach (Institution institution in _institutionList)
                {
                    <MudSelectItem Value="@(institution.institutionId)">@institution.name</MudSelectItem>
                }
            </MudSelect>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnAddItem"
                    FullWidth="true">Add user</MudButton>
            </MudCardActions>
            <MudCardActions>
                <MudButton FullWidth="true" @onclick="OnCancel" Variant="Variant.Filled"
                    Color="Color.Warning">Cancel</MudButton>
            </MudCardActions>
        </MudCardContent>
    </MudCard>
</MudForm>

@code
{
    List<Institution> _institutionList = new List<Institution>();

    protected override async Task OnInitializedAsync()
    {
        APIAttribute instApiAttribute = Attribute.GetCustomAttribute(typeof(Institution),
        typeof(APIAttribute)) as APIAttribute;

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, Configuration.GetValue<string>("ApiBaseAdress") + instApiAttribute.ApiPath);

        HttpClient client = ClientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using Stream responseStream = await response.Content.ReadAsStreamAsync();
            _institutionList = await JsonSerializer.DeserializeAsync<List<Institution>>(responseStream);
        }
    }
}