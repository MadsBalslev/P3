@typeparam T
@using MudBlazor
@using System.Reflection
@using System.IO
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory _clientFactory
@inject IManagerService<T> _managerService

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

    .selected>td {
        color: white !important;
    }

    .selected>td .mud-input {
        color: white !important;
    }
</style>

<CascadingValue Value="this">
    <MudContainer>
    <MudGrid Justify="Justify.Center">
        @if (_currentMode == ManagerMode.Initial)
            _tableSize = 12;
        else if (_currentMode == ManagerMode.Create || _currentMode == ManagerMode.Edit)
            _tableSize = 8;
        <MudItem xs="_tableSize">
            <MudTable Items="@_itemList" Hover="@true" CanCancelEdit="@true"
                Filter="new Func<T, bool>(FilterFunc)"
                @bind-SelectedItem="_managerService.SelectedItem" SortLabel="Sort By" @ref="_table"
                OnRowClick="RowClickEvent" T="T" RowClassFunc="@SelectedRowClassFunc">
                <ToolBarContent>
                    <!-- TODO Add dynamic button name -->
                    <MudButton id="Create" Variant="Variant.Outlined" @onclick=@OnCreateItem>Create
                    </MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search"
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                        IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>
                <HeaderContent>
                    @* // TODO This foreach loop is a lot like the one below, they should be
                        combined in at private
                        method, where you can vary the renderfragment in the inntermost if statement *@
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute =
                        propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as
                            ManagerMetadataAttribute;
                            if (_user.accessLevel >= managerMetadata.ViewableBy)
                            {
                                <MudTh>@managerMetadata.HeaderDisplayname</MudTh>
                            }
                        }
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute =
                        propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as
                            ManagerMetadataAttribute;
                            if (_user.accessLevel >= managerMetadata.ViewableBy)
                            {
                                <MudTd>@propertyInfo.GetValue(context, null).ToString()</MudTd>
                            }
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
        <MudItem xs="4">
            @if (_currentMode == ManagerMode.Create)
            {
                @CreateForm
            }
            else if (_currentMode == ManagerMode.Edit)
            {
                @EditForm
            }
        </MudItem>
    </MudGrid>
</MudContainer>
</CascadingValue>



@code
{
    private enum ManagerMode
    {
        First = 0,
        Initial = 0,
        Create = 1,
        Edit = 2,
        Last = 2,
    }

    [Parameter]
    public RenderFragment CreateForm { get; set; }

    [Parameter]
    public RenderFragment EditForm { get; set; }

    [Parameter]
    public bool Collapsed { get; set; } = true;

    [CascadingParameter]
    protected User _user { get; set; }

    private readonly APIAttribute _apiAttribute =
    Attribute.GetCustomAttribute(typeof(T), typeof(APIAttribute)) as APIAttribute;

    private readonly IEnumerable<PropertyInfo> _propertyInfoList =
    typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

    private List<T> _itemList = new List<T>();

    private string _searchString = "";

    private T _createItem = new T();

    private T _proxySelectedItem;

    private int selectedRowNumber = -1;

    private int _tableSize = 12;

    private ManagerMode _currentMode = ManagerMode.Initial;

    private MudTable<T> _table;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _managerService.RefreshRequested += OnRefresh;
        await GetItems();
    }

    private async Task OnRefresh()
    {
        await GetItems();
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterFunc(T item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }
        else if (SearchStringMatch(item))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool SearchStringMatch(T item)
    {
        foreach (PropertyInfo propertyInfo in _propertyInfoList)
        {
            if (PropertyIsAvaliableAndSearchStringMatch(item, propertyInfo))
            {
                return true;
            }
        }
        return false;
    }

    private bool PropertyIsAvaliableAndSearchStringMatch(T item, PropertyInfo propertyInfo)
    {
        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
        ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
        if (managerMetadata == null)
        {
            return false;
        }

        if (_user.accessLevel < managerMetadata.ViewableBy)
        {
            return false;
        }

        string propertyValue = typeof(T).GetProperty(propertyInfo.Name).GetValue(item, null).ToString();
        if (propertyValue == null)
        {
            return false;
        }

        if (propertyValue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    void OnCreateItem()
    {
        if (_currentMode == ManagerMode.Initial || _currentMode == ManagerMode.Edit)
            _currentMode = ManagerMode.Create;
        else if (_currentMode == ManagerMode.Create)
            _currentMode = ManagerMode.Initial;
    }

    private async Task GetItems()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _apiAttribute.APIPath);

        HttpClient client = _clientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using Stream responseStream = await response.Content.ReadAsStreamAsync();
            _itemList = await JsonSerializer.DeserializeAsync<List<T>>(responseStream);
        }
    }

    private string SelectedRowClassFunc(T element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (_table.SelectedItem != null && _table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    // DONT REMOVE THIS FUNCTION IT TRIGGERS STATE HAS CHANGED!!!
    private void RowClickEvent(TableRowClickEventArgs<T> tableRowClickEventArgs)
    {
        _currentMode = ManagerMode.Edit;
    }

    // TODO implement this function
    private async Task DeleteItem()
    {
        throw new NotImplementedException();
    }
}