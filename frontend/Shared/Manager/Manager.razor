@using System.Reflection
@using Microsoft.Extensions.Configuration
@using MudBlazor
@using System
@using System.IO
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@inject IManagerService ManagerService
@inject ISnackbar Snackbar
@inject IConfiguration Configuration
@typeparam T

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

    .selected>td {
        color: white !important;
    }

    .selected>td .mud-input {
        color: white !important;
    }
</style>

<MudContainer>
    <MudGrid Justify="Justify.Center">
        @if (_currentMode == ManagerMode.Initial)
            _tableSize = 12;
        else if (_currentMode == ManagerMode.Create || _currentMode ==
        ManagerMode.Edit)
            _tableSize = 8;
        <MudItem xs="_tableSize">
            <MudTable Loading="@_loading" Height="586px" FixedHeader="@true" Items="@_items"
                Hover="@true" CanCancelEdit="@true" Filter="new Func<T, bool>(FilterFunc)"
                @bind-SelectedItem="_selectedItem" SortLabel="Sort By" @ref="_table"
                OnRowClick="RowClickEvent" T="T" RowClassFunc="@SelectedRowClassFunc"
                Context="item">
                <ToolBarContent>
                    <!-- TODO Add dynamic button name -->
                    <MudButton id="Create" Variant="Variant.Outlined" @onclick=@OnCreateItem>Create
                    </MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search"
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                        IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>
                <HeaderContent>
                    @HeaderContent
                </HeaderContent>
                <RowTemplate>
                    @RowTemplate(item)
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
        <CascadingValue Value="_selectedItem">
            <MudItem xs="4">
                @if (_currentMode == ManagerMode.Create)
                {
                    @CreateForm
                }
                else if (_currentMode == ManagerMode.Edit)
                {
                    @EditForm
                }
            </MudItem>
        </CascadingValue>
    </MudGrid>
</MudContainer>

@code
{
    private List<T> _items { get; set; } = new List<T>();

    [Parameter]
    public RenderFragment HeaderContent { get; set; }

    [Parameter]
    public RenderFragment<T> RowTemplate { get; set; }

    [Parameter]
    public RenderFragment CreateForm { get; set; }

    [Parameter]
    public RenderFragment EditForm { get; set; }

    [CascadingParameter]
    protected User _user { get; set; }

    private readonly APIAttribute _apiAttribute =
    Attribute.GetCustomAttribute(typeof(T), typeof(APIAttribute)) as APIAttribute;

    private readonly IEnumerable<PropertyInfo> _propertyInfoList =
    typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);


    private T _selectedItem = new T();

    private T _lastItem = new T();

    private string _searchString = "";

    private int selectedRowNumber = -1;

    private int _tableSize = 12;

    private MudTable<T> _table;

    private bool _loading = false;

    private ManagerMode _currentMode = ManagerMode.Initial;

    protected override async Task OnInitializedAsync()
    {
        ManagerService.RefreshRequested += OnRefresh;
        await OnRefresh();
    }

    private async Task OnRefresh()
    {
        try
        {
            _currentMode = ManagerMode.Initial;
            _loading = true;
            HttpResponseMessage response = await GetItems();

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Something went wrong, status code: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Add($"Something went wrong: {e.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool FilterFunc(T item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }
        else if (SearchStringMatch(item))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool SearchStringMatch(T item)
    {
        foreach (PropertyInfo propertyInfo in _propertyInfoList)
        {
            if (PropertyIsAvaliableAndSearchStringMatch(item, propertyInfo))
            {
                return true;
            }
        }
        return false;
    }

    private bool PropertyIsAvaliableAndSearchStringMatch(T item, PropertyInfo propertyInfo)
    {
        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
        ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
        if (managerMetadata == null)
        {
            return false;
        }

        if (_user.accessLevel < managerMetadata.ViewableBy)
        {
            return false;
        }

        string propertyValue = typeof(T).GetProperty(propertyInfo.Name).GetValue(item, null).ToString();
        if (propertyValue == null)
        {
            return false;
        }

        if (propertyValue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void OnCreateItem()
    {
        if (_currentMode == ManagerMode.Initial || _currentMode ==
        ManagerMode.Edit)
            _currentMode = ManagerMode.Create;
        else if (_currentMode == ManagerMode.Create)
            _currentMode = ManagerMode.Initial;
    }

    private async Task<HttpResponseMessage> GetItems()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, Configuration.GetValue<string>("ApiBaseAdress") + _apiAttribute.ApiPath);

        HttpClient client = ClientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using Stream responseStream = await response.Content.ReadAsStreamAsync();
            _items = await JsonSerializer.DeserializeAsync<List<T>>(responseStream);
        }

        return response;
    }

    private string SelectedRowClassFunc(T element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (_table.SelectedItem != null && _table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<T> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item.Equals(_lastItem) && _currentMode !=
        ManagerMode.Initial)
        {
            _currentMode = ManagerMode.Initial;
        }
        else
        {
            _currentMode = ManagerMode.Edit;
        }
        _lastItem = _selectedItem;
    }


}