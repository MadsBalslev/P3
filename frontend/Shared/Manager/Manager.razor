@typeparam T
@using MudBlazor
@using System.Reflection
@using System.IO
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="_tableSize">
            <MudTable Items="@_itemList" Hover="@true" CanCancelEdit="@true" Filter="new Func<T, bool>(FilterFunc)"
                @bind-SelectedItem="_selectedItem" SortLabel="Sort By">
                <ToolBarContent>
                    <!-- TODO Add dynamic button name -->
                    <MudButton id="Create" Variant="Variant.Outlined" @onclick=@OnCreateItem>Create</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>
                <HeaderContent>
                    @* // TODO This foreach loop is a lot like the one below, they should be combined in at private
                        method, where you can vary the renderfragment in the inntermost if statement *@
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
                            if (_userAccessLevel >= managerMetadata.ViewableBy)
                            {
                                <MudTh>@managerMetadata.HeaderDisplayname</MudTh>
                            }
                        }
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
                            if (_userAccessLevel >= managerMetadata.ViewableBy)
                            {
                                <MudTd>@propertyInfo.GetValue(context, null).ToString()</MudTd>
                            }
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
        <MudItem>
            @if (_currentMode == ManagerMode.Create)
            {
                @CreateForm
            }
            else if (_currentMode == ManagerMode.Edit)
            {
                @EditForm
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private enum ManagerMode
    {
        First = 0,
        Initial = 0,
        Create = 1,
        Edit = 2,
        Last = 2,
    }

    [Parameter]
    public RenderFragment CreateForm { get; set; }

    [Parameter]
    public RenderFragment EditForm { get; set; }

    [Parameter]
    public bool Collapsed { get; set; } = true;

    [CascadingParameter]
    protected AccessLevel _userAccessLevel { get; set; }

    private readonly APIAttribute _apiAttribute =
    Attribute.GetCustomAttribute(typeof(T), typeof(APIAttribute)) as APIAttribute;

    private readonly IEnumerable<PropertyInfo> _propertyInfoList =
    typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

    private List<T> _itemList = new List<T>();

    private string _searchString = "";

    private T _selectedItem = new T();

    private T _createItem = new T();

    private int _tableSize = 12;

    private ManagerMode _currentMode = ManagerMode.Initial;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetItems();
    }

    private bool FilterFunc(T item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }
        else if (SearchStringMatch(item))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool SearchStringMatch(T item)
    {
        foreach (PropertyInfo propertyInfo in _propertyInfoList)
        {
            if (PropertyIsAvaliableAndSearchStringMatch(item, propertyInfo))
            {
                return true;
            }
        }
        return false;
    }

    private bool PropertyIsAvaliableAndSearchStringMatch(T item, PropertyInfo propertyInfo)
    {
        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
        ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
        if (managerMetadata == null)
        {
            return false;
        }

        if (_userAccessLevel < managerMetadata.ViewableBy)
        {
            return false;
        }

        string propertyValue = typeof(T).GetProperty(propertyInfo.Name).GetValue(item, null).ToString();
        if (propertyValue == null)
        {
            return false;
        }

        if (propertyValue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    void OnCreateItem()
    {
        Collapsed = !Collapsed;
        if (Collapsed)
        {
            _tableSize = 12;
        }
        else
        {
            _tableSize = 8;
        }
    }

    private async Task GetItems()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _apiAttribute.APIPath);

        HttpClient client = ClientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using Stream responseStream = await response.Content.ReadAsStreamAsync();
            _itemList = await JsonSerializer.DeserializeAsync<List<T>>(responseStream);
        }
    }

    public async Task PostItem()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, _apiAttribute.APIPath);
        string requestMessage = _createItem.ToJSON();
        Console.WriteLine(JsonSerializer.Serialize<T>(_createItem));
        request.Content = new StringContent(requestMessage, Encoding.UTF8, "application/Json");

        Console.WriteLine(requestMessage);

        HttpClient client = ClientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        Console.WriteLine(response.ToString());
        @* if (response.IsSuccessStatusCode)
            {

            } *@
    }

    public async Task OnAddItem()
    {
        await PostItem();
        await GetItems();
    }

    // TODO implement
    private async Task PutItem()
    {
        throw new NotImplementedException();
    }

    // TODO implement this function
    private async Task DeleteItem()
    {
        throw new NotImplementedException();
    }
}
@* <MudForm>
    <MudCard>
    <MudCardContent>
    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
    {
    Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
    if (attribute is ManagerMetadataAttribute)
    {
    ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
    if (_userAccessLevel >= managerMetadata.EditableBy)
    {
    string propertyValue = propertyInfo.GetValue(_createItem, null).ToString();
    Action<string> onchangeHandler = text => propertyInfo.SetValue(_createItem, text);
    switch (managerMetadata.EditFormRepresentation)
    {
    case FormRepresentation.TextField:
    <MudTextField type="text"
    Label="@managerMetadata.HeaderDisplayname"
    Class="mb-3"
    Value="@propertyValue"
    TextChanged="onchangeHandler" />
    break;

    case FormRepresentation.DatePicker:
    <MudDatePicker Label="@managerMetadata.HeaderDisplayname" Class="mb-3" />
    break;

    case FormRepresentation.Selector:
    <p>Selector</p>
    break;

    case FormRepresentation.PictureUpload:
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.CloudUpload" for="fileInput" FullWidth="true"
    Class="mb-3">Upload poster</MudButton>
    break;
    }
    }
    }
    }
    <MudButton @onclick="OnAddItem" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
    class="mb-3">Add</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true">Cancel</MudButton>
    </MudCardContent>
    </MudCard>
    </MudForm> *@