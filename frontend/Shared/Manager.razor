@using MudBlazor
@typeparam T
@inherits MudTable<T>
@using System.Reflection

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudTable Items="@ItemList" Hover="@true" CanCancelEdit="@true" Filter="new Func<T, bool>(FilterFunc)"
                @bind-SelectedItem="_selectedItem" SortLabel="Sort By">
                <ToolBarContent>
                    <!-- TODO Add dynamic button name -->
                    <MudButton Variant="Variant.Outlined">Create</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>

                <HeaderContent>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
                            if (_userAccessLevel >= managerMetadata.AccessLevel)
                            {
                                <MudTh>@managerMetadata.HeaderDisplayname</MudTh>
                            }
                        }
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(ManagerMetadataAttribute), true);
                        if (attribute is ManagerMetadataAttribute)
                        {
                            ManagerMetadataAttribute managerMetadata = attribute as ManagerMetadataAttribute;
                            if (_userAccessLevel >= managerMetadata.AccessLevel)
                            {
                                <MudTd>@typeof(T).GetProperty(propertyInfo.Name).GetValue(context, null)</MudTd>
                            }
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Parameter]
    public List<T> ItemList { get; set; } = new List<T>();

    [Parameter]
    public RenderFragment MudForm { get; set; }

    [CascadingParameter]
    protected AccessLevel _userAccessLevel { get; set; }

    private IEnumerable<PropertyInfo> _propertyInfoList { get; set; } = typeof(T).GetProperties(BindingFlags.Public |
    BindingFlags.Instance);

    private T _selectedItem { get; set; }

    private string _searchString = "";

    // TODO Implement
    private bool FilterFunc(T item)
    {
        throw new NotImplementedException();
        @* if (string.IsNullOrWhiteSpace(_searchString))
            return true;
            if (element.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            if (element.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            if ($"{element.Number} {element.Position} {element.Molar}".Contains(_searchString))
            return true;
            return false; *@
    }

    // TODO implement
    private async Task<List<T>> GetItems()
    {
        throw new NotImplementedException();
    }

    // TODO implement
    private async Task<List<T>> PostItem()
    {
        throw new NotImplementedException();
    }

    // TODO implement
    private async Task<List<T>> PutItem()
    {
        throw new NotImplementedException();
    }

    // TODO implement this function
    private async Task<List<T>> DeleteItem()
    {
        throw new NotImplementedException();
    }
}