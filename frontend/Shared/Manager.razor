@using MudBlazor
@typeparam T
@inherits MudTable<T>
@using System.Reflection

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudTable Items="@ItemList">
                <HeaderContent>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(AccessLevelAttribute), true);
                        if (attribute is AccessLevelAttribute)
                        {
                            AccessLevelAttribute accessAttribute = attribute as AccessLevelAttribute;
                            if (_userAccessLevel >= accessAttribute.AccessLevel)
                            {
                                attribute = propertyInfo.GetCustomAttribute(typeof(HeaderDisplaynameAttribute), true);
                                if (attribute is HeaderDisplaynameAttribute)
                                {
                                    HeaderDisplaynameAttribute headerDisplaynameAttribute = attribute as HeaderDisplaynameAttribute;
                                    <MudTh>@headerDisplaynameAttribute.HeaderDisplayname</MudTh>
                                }
                            }
                        }
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (PropertyInfo propertyInfo in _propertyInfoList)
                    {
                        Attribute attribute = propertyInfo.GetCustomAttribute(typeof(AccessLevelAttribute), true);
                        if (attribute is AccessLevelAttribute)
                        {
                            AccessLevelAttribute accessAttribute = attribute as AccessLevelAttribute;
                            if (_userAccessLevel >= accessAttribute.AccessLevel)
                            {
                                MethodInfo getter = propertyInfo.GetGetMethod();
                                <MudTd>@typeof(T).GetProperty(propertyInfo.Name).GetValue(context, null)</MudTd>
                            }
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
        <MudItem>
            <MudForm>
                @MudForm
            </MudForm>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private IEnumerable<PropertyInfo> _propertyInfoList { get; set; } = typeof(T).GetProperties(BindingFlags.Public |
        BindingFlags.Instance);

    [Parameter]
    public List<T> ItemList { get; set; } = new List<T>();

    [Parameter]
    public RenderFragment MudForm { get; set; }

    [CascadingParameter]
    protected AccessLevel _userAccessLevel { get; set; }

    @*
        private async Task<List<T>> GetItems()
        {


        }

        private Task<List<T>> PostItem()
        {

        }

        private PutItem()
        {

        }

        private void DeleteItem()
        {

        } *@

}